{-# OPTIONS --allow-unsolved-metas #-}
open import Level
open import Function using (flip)
open import Data.Product
open import IO
open import Relation.Binary.PropositionalEquality hiding ([_]; naturality)
open ‚â°-Reasoning

open import Category
open import Functor
open import Product
open import NaturalTransformation
open import Monoidal
open import SymmetricMonoidal
open import CD-Category
open import CDAffine-Category
open import Cartesian
open import SetInstance

module Lens.SimpleLens
  {n m}
  {cat : Cat n m}
  {mc : Monoidal cat}
  {smc : SymmetricMonoidal mc}
  {cd : CD-Category smc}
  {cda : CDAffine-Category cd}
  (cart : Cartesian cda) where

import Lens.Lens as L
import Lens.LensCategory as LC
import Lens.LensAssociativity
import Lens.LensMonoidal
open import MonoidalNaturalTransformation
private
  module cct = Cat cat
  module mc = Monoidal.Monoidal mc
  module smc = SymmetricMonoidal.SymmetricMonoidal smc
  module cd = CD-Category.CD-Category cd
  module cda = CDAffine-Category.CDAffine-Category cda
  module cart = Cartesian.Cartesian cart
  module lenss = L cart
  module lc = LC cart
  module lensassoc = Lens.LensAssociativity cart
  module lensmon = Lens.LensMonoidal cart

open _Functor_
open Cat.CommutativeSquare
open import Isomorphism
open cct
open mc
open smc
open cd
open cda
open cart
open lenss
open lc
open lensassoc using (lensAssoc)
open lensmon

-- also called monomorphic lenses
record SimpleLens (a b : obj) : (Set m) where
  constructor MkSimpleLens
  field
    lens : Lens a a b b

MkSimpleLens' : {a b : obj} ‚Üí a hom b ‚Üí a ‚äó‚Çí b hom a ‚Üí SimpleLens a b
MkSimpleLens' g p = MkSimpleLens (MkLens g p)

_‚óè‚Çõ‚Çó_ : {a b c : obj} ‚Üí
  SimpleLens a b ‚Üí SimpleLens b c ‚Üí SimpleLens a c
_‚óè‚Çõ‚Çó_ (MkSimpleLens g) (MkSimpleLens f) = MkSimpleLens (g ‚óè‚Çó f)

simpleLensId : {a : obj} ‚Üí SimpleLens a a
simpleLensId = MkSimpleLens lensId

simpleLensCategory : Cat n m
simpleLensCategory = MkCat
  obj
  SimpleLens
  simpleLensId
  _‚óè‚Çõ‚Çó_
  (cong MkSimpleLens lensLeftId)
  (cong MkSimpleLens lensRightId)
  (cong MkSimpleLens lensAssoc)
  Œª f‚â°g h‚â°i ‚Üí cong MkSimpleLens (‚óè‚Çó-resp-‚â° (cong SimpleLens.lens f‚â°g) (cong SimpleLens.lens h‚â°i))

simpleLensMonoidal : Monoidal simpleLensCategory
simpleLensMonoidal = MkMonoidal
  (MkFunctor
    (mapObj ‚äó)
    (Œª (MkSimpleLens l , MkSimpleLens r) ‚Üí MkSimpleLens (mapMor ‚äó‚Çó (l , r)))
    (cong MkSimpleLens (idLaw ‚äó‚Çó))
    (Œª f g ‚Üí cong MkSimpleLens let t = compLaw ‚äó‚Çó in {!!}))
  ùüô
  {!!}
  (MkIso (MkNatTrans (MkSimpleLens (MkLens Œª‚Çò {!!})) {!!}) {!!} {!!} {!!})
  {!!}
  {!!}
  {!!}
  -- (cong MkSimpleLens (Monoidal.‚ñµ-identity lensMonoidal))
  -- (cong MkSimpleLens (Monoidal.‚¨†-identity lensMonoidal))

simpleLensSymmetricMonoidal : SymmetricMonoidal simpleLensMonoidal
simpleLensSymmetricMonoidal = MkSymmMonoidal (MkIso
  (MkNatTrans (MkSimpleLens (‚óø œÉ‚Çò || œÉ‚Çò ‚ó∫)) (Cat.MkCommSq (cong MkSimpleLens {!!})))
  (MkNatTrans (MkSimpleLens (‚óø œÉ‚Çò || œÉ‚Çò ‚ó∫)) (Cat.MkCommSq (cong MkSimpleLens {!!})))
  {!!}
  {!!})


simpleLensCDCategory : CD-Category simpleLensSymmetricMonoidal
simpleLensCDCategory = MkCD-Category
  (MkMonoidalNatTrans (MkNatTrans (MkSimpleLens' Œ¥‚Çò (œÄ‚ÇÇ ‚óè  œÄ‚ÇÅ)) (Cat.MkCommSq {!!})) {!!} {!!})
  (MkMonoidalNatTrans (MkNatTrans (MkSimpleLens (CoPt id)) (Cat.MkCommSq (cong MkSimpleLens {!!}))) {!!} {!!})
  {!!}
  {!!}
  {!!}

