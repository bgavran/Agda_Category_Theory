{-# OPTIONS --allow-unsolved-metas #-}

module Product where

open import Data.Product
open import Level
open import Function using (flip) renaming (_‚àò_ to _‚àô_)
open import IO
open import Relation.Binary.PropositionalEquality hiding ([_])
open ‚â°-Reasoning

open import Category
open import Functor

open Cat
open _Functor_

private
  variable
    n m n' m' : Level
    c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ d‚ÇÅ d‚ÇÇ : Cat n m

_X_ : (Cat n m) ‚Üí (Cat n' m') ‚Üí Cat (n ‚äî n') (m ‚äî m')
obj (c‚ÇÅ X c‚ÇÇ) = (obj c‚ÇÅ √ó obj c‚ÇÇ)
_hom_ (c‚ÇÅ X c‚ÇÇ) (a‚ÇÅ , a‚ÇÇ) (b‚ÇÅ , b‚ÇÇ) = (a‚ÇÅ hom‚ÇÅ b‚ÇÅ) √ó (a‚ÇÇ hom‚ÇÇ b‚ÇÇ)
  where _hom‚ÇÅ_ = _hom_ c‚ÇÅ
        _hom‚ÇÇ_ = _hom_ c‚ÇÇ
id (c‚ÇÅ X c‚ÇÇ) = id c‚ÇÅ , id c‚ÇÇ
_‚óè_ (c‚ÇÅ X c‚ÇÇ) = zip (_‚óè_ c‚ÇÅ) (_‚óè_ c‚ÇÇ)
left-id (c‚ÇÅ X c‚ÇÇ) = cong‚ÇÇ _,_ (left-id c‚ÇÅ) (left-id c‚ÇÇ)
right-id (c‚ÇÅ X c‚ÇÇ) = cong‚ÇÇ _,_ (right-id c‚ÇÅ) (right-id c‚ÇÇ)
assoc (c‚ÇÅ X c‚ÇÇ) = cong‚ÇÇ _,_ (assoc c‚ÇÅ) (assoc c‚ÇÇ)
‚óè-resp-‚â° (c‚ÇÅ X c‚ÇÇ) = {!!} -- x y = cong‚ÇÇ (_,_) -- (‚óè-resp-‚â° c‚ÇÅ (cong proj‚ÇÅ x) (cong proj‚ÇÅ y))
                                            -- (‚óè-resp-‚â° c‚ÇÇ (cong proj‚ÇÇ x) (cong proj‚ÇÇ y))

productAssociator‚Çó : ((c‚ÇÅ X c‚ÇÇ) X c‚ÇÉ) Functor (c‚ÇÅ X (c‚ÇÇ X c‚ÇÉ))
productAssociator‚Çó = MkFunctor
  (< proj‚ÇÅ ‚àô proj‚ÇÅ , < proj‚ÇÇ ‚àô proj‚ÇÅ , proj‚ÇÇ > > )
  (< proj‚ÇÅ ‚àô proj‚ÇÅ , < proj‚ÇÇ ‚àô proj‚ÇÅ , proj‚ÇÇ > > )
  refl
  (Œª _ _ ‚Üí refl)

productAssociator·µ£ : (c‚ÇÅ X (c‚ÇÇ X c‚ÇÉ)) Functor ((c‚ÇÅ X c‚ÇÇ) X c‚ÇÉ)
productAssociator·µ£ = MkFunctor
  < < proj‚ÇÅ , proj‚ÇÅ ‚àô proj‚ÇÇ > , proj‚ÇÇ ‚àô proj‚ÇÇ >
  < < proj‚ÇÅ , proj‚ÇÅ ‚àô proj‚ÇÇ > , proj‚ÇÇ ‚àô proj‚ÇÇ >
  refl
  (Œª _ _ ‚Üí refl)


_ùïè_ : (c‚ÇÅ Functor d‚ÇÅ) ‚Üí (c‚ÇÇ Functor d‚ÇÇ) ‚Üí (c‚ÇÅ X c‚ÇÇ) Functor (d‚ÇÅ X d‚ÇÇ)
mapObj (F ùïè G) (a , a') = mapObj F a , mapObj G a'
mapMor (F ùïè G) (f , g) = mapMor F f , mapMor G g
idLaw (F ùïè G) = cong‚ÇÇ _,_ (idLaw F) (idLaw G)
compLaw (F ùïè G) (f‚ÇÅ , f‚ÇÇ) (g‚ÇÅ , g‚ÇÇ) = cong‚ÇÇ _,_ (compLaw F f‚ÇÅ g‚ÇÅ) (compLaw G f‚ÇÇ g‚ÇÇ)



-- the symbol should be read bottom to top as if branching
_\/_ : c‚ÇÅ Functor  c‚ÇÇ
     ‚Üí c‚ÇÅ Functor       c‚ÇÉ
     ‚Üí c‚ÇÅ Functor (c‚ÇÇ X c‚ÇÉ)
mapObj (F \/ G) = Œª a ‚Üí mapObj F a , mapObj G a
mapMor (F \/ G) = Œª f ‚Üí mapMor F f , mapMor G f
idLaw (F \/ G) = cong‚ÇÇ _,_ (idLaw F) (idLaw G)
compLaw (F \/ G) f g = cong‚ÇÇ _,_ (compLaw F f g) (compLaw G f g)

swapFunctor : (c‚ÇÅ X c‚ÇÇ) Functor (c‚ÇÇ X c‚ÇÅ)
mapObj swapFunctor = swap
mapMor swapFunctor = swap
idLaw swapFunctor = refl
compLaw swapFunctor = Œª _ _ ‚Üí refl


{-
|   |   |   |
|    \ /    |
|     X‚Äå     |
|    / \    |
|   |   |   |
-}

|‚áÜ| : {a : Set n} {b : Set m} {c : Set n'} {d : Set m'}
  ‚Üí ((a √ó b) √ó (c √ó d)) ‚Üí ((a √ó c) √ó (b √ó d))
|‚áÜ| ((a , b) , (c , d)) = (a , c) , (b , d)

|‚áÜ|Xfunctor : ((c‚ÇÅ X c‚ÇÇ) X (c‚ÇÉ X c‚ÇÑ)) Functor ((c‚ÇÅ X c‚ÇÉ) X (c‚ÇÇ X c‚ÇÑ))
mapObj |‚áÜ|Xfunctor  = |‚áÜ|
mapMor |‚áÜ|Xfunctor  = |‚áÜ|
idLaw |‚áÜ|Xfunctor   = refl
compLaw |‚áÜ|Xfunctor = Œª _ _ ‚Üí refl


‚É§ : c‚ÇÅ Functor (c‚ÇÅ X c‚ÇÅ)
‚É§ = idFunctor \/ idFunctor
