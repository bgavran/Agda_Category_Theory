{-# OPTIONS --allow-unsolved-metas #-}
module SetInstance where

open import Data.Product
open import Level
open import Function using (flip; _‚àò‚Ä≤_) renaming (id to id')
open import Cubical.Core.Everything
open import Cubical.Foundations.Prelude

open import Category

ùïäùïñùï• : {o : Level} ‚Üí Cat (suc o) o
ùïäùïñùï• {o = o} = MkCat
  (Set o)
  (Œª a b ‚Üí a ‚Üí b)
  id'
  (flip _‚àò‚Ä≤_)
  refl
  refl
  refl
  Œª f‚â°g h‚â°i ‚Üí {!!}


oo : {o m : Level} ‚Üí Cat o o ‚Üí Cat o m
oo cat = {!cat!}



open import Data.Product
open import Data.List
open Data.List
open import Data.Vec
open import Data.Nat

concreteOptic : {P A B A' B' : Set }
  ‚Üí Œ£ Set (Œª M ‚Üí (
                   (P √ó A ‚Üí M √ó B)
                 √ó (M √ó B' ‚Üí P √ó A')
                 )
          )
concreteOptic = {!!}

record oneOptic {j k : Level} (P A B A' B' : Set j) : Set ((Level.suc j) Level.‚äî (Level.suc k)) where
  constructor MkOptic
  field
    M : Set j
    l : P √ó A ‚Üí M √ó B
    r : M √ó B' ‚Üí P √ó A'

ttt : {k : Level} ‚Üí Set k ‚Üí Set k ‚Üí Vec (Set k) 2
ttt X Y = X ‚à∑ Y ‚à∑ []

buildOptic' : {j k : Level} {P A B A' B' : Set j}
  ‚Üí oneOptic {j = j} {k = k} P A B A' B'
  ‚Üí (n : ‚Ñï)
  ‚Üí oneOptic {j = j} {k = k} P (Vec A n) (Vec B n) (Vec A' n) (Vec B' n)
buildOptic' {k = k} {P = P} optic ‚Ñï.zero = MkOptic P ((Œª {(p , []) ‚Üí p , []})) (Œª {(p , []) ‚Üí p , []})
buildOptic'         optic (‚Ñï.suc n) = let (MkOptic MS ls rs) = buildOptic' optic n
                                      in MkOptic {!!}
                                          (Œª { (p , a ‚à∑ as) ‚Üí let (ms , bs) = ls (p , as)
                                                              in {!!}})
                                          (Œª { (m , b' ‚à∑ b's) ‚Üí let t = rs
                                                                in {!!}})

-- record OpticN {j : Level} (P A B A' B' : Set j) (n : ‚Ñï): Set (Level.suc j) where
-- constructor MkOpticN
-- field
-- MS : Set j
-- ls : P √ó (Vec A n) ‚Üí Vec MS n √ó (Vec B n)
-- rs : (Vec MS (n + 1)) √ó (Vec B' n) ‚Üí P √ó (Vec A' n)


--buildOptic : {j : Level} {P A B A' B' : Set j}
--  ‚Üí oneOptic P A B A' B' ‚Üí (n : ‚Ñï) ‚Üí OpticN P A B A' B' n
--buildOptic {P = P} optic ‚Ñï.zero = MkOpticN P ((Œª { (p      , []) ‚Üí p ‚à∑ [] , []})) (Œª { (p ‚à∑ [] , []) ‚Üí p , []})
--buildOptic optic@(MkOptic M l r) (‚Ñï.suc n) = let (MkOpticN MS ls rs) = buildOptic optic n
--                                              in MkOpticN M
--                                                 (Œª { (p , a ‚à∑ as) ‚Üí let (ms , bs) = ls (p , as)
--                                                                     in {!!}})
--                                                 (Œª { (m ‚à∑ ms , b' ‚à∑ b's) ‚Üí let t = rs
--                                                                            in {!!}})
