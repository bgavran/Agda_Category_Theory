module DependentFunctor where

open import Level
open import Function renaming (id to id‚Üí; _‚àò_ to _‚àò·∂†_)
open import Cubical.Core.Everything
open import Cubical.Foundations.Prelude
open import Data.Bool.Base

open import Category
open import Functor
open import NaturalTransformation
open import CategoryOfCategories

private
  variable o n m n' m' n'' m'' : Level

open Cat renaming (_‚àò_ to _‚àò‚ÇÅ_)
open _Functor_
open _NatTrans_

record _DepFunctor_ (cat‚ÇÅ : Cat o m) (G : cat‚ÇÅ Functor (‚ÑÇùïíùï• o m)) : Type (o ‚äî m) where
  constructor MkDepFunctor
  open _Functor_ G renaming (mapObj to G‚ÇÄ; mapMor to G‚ÇÅ) -- G‚ÇÄ is mapping on objects, G‚ÇÅ is mapping on morphisms
  field
    mapDObj : (a : obj cat‚ÇÅ) ‚Üí obj (G‚ÇÄ a)
    mapDMor : {a b : obj cat‚ÇÅ} ‚Üí (f : cat‚ÇÅ [ a , b ]) ‚Üí (G‚ÇÄ b) [ (mapObj (G‚ÇÅ f)) (mapDObj a) , mapDObj b ]
    idDLaw : {a : obj cat‚ÇÅ} ‚Üí id (G‚ÇÄ a) {mapDObj a} ‚â° let t = mapDMor (id cat‚ÇÅ {a}) in {!t!} -- need to do a idLaw for G rewrite?
    -- compLaw


record _DepNatTrans_ 
  {cat‚ÇÅ : Cat o m}
  {G G' : cat‚ÇÅ Functor (‚ÑÇùïíùï• o m)}
  (F : cat‚ÇÅ DepFunctor G)
  (F' : cat‚ÇÅ DepFunctor G') : Type (suc (o ‚äî m)) where
  constructor MkDepNatTrans
  open _Functor_ G renaming (mapObj to G‚ÇÄ; mapMor to G‚ÇÅ) -- F‚ÇÄ is mapping on objects, F‚ÇÅ is mapping on morphisms
  open _Functor_ G' renaming (mapObj to G'‚ÇÄ; mapMor to G'‚ÇÅ)

  open _DepFunctor_ F renaming (mapDObj to F‚ÇÄ; mapDMor to F‚ÇÅ) -- F‚ÇÄ is mapping on objects, F‚ÇÅ is mapping on morphisms
  open _DepFunctor_ F' renaming (mapDObj to F'‚ÇÄ; mapDMor to F'‚ÇÅ)
  field
    nt : G NatTrans G'
    Œ± : (a : obj cat‚ÇÅ) ‚Üí  G'‚ÇÄ a [ (mapObj (Œ∑ nt {a})) (F‚ÇÄ a),  (F'‚ÇÄ a) ]

-- let t = id (G‚ÇÄ a) {mapDObj a}
--                                   w = mapDMor (id cat‚ÇÅ {a})
--                               in {!!}

